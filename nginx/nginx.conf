user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Include MIME types
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log settings
    access_log /var/log/nginx/access.log combined;
    sendfile        on;
    keepalive_timeout  65;

    # Upstream servers
    upstream php_apache_prod {
        server php-apache:80;
    }

    upstream php_apache_preprod {
        server php-apache-preprod:80;
    }

    # Redirect HTTP to HTTPS and handle ACME challenges
    server {
        listen 80;
        server_name XXXXXX.com www.XXXXXX.com preprod.XXXXXX.com;

        # Redirect www to non-www
        if ($host = 'www.XXXXXX.com') {
            return 301 https://XXXXXX.com$request_uri;
        }

        # Handle Let's Encrypt ACME Challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block for XXXXXX.com and www.XXXXXX.com
    server {
        listen 443 ssl;
        server_name XXXXXX.com www.XXXXXX.com;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/XXXXXX.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/XXXXXX.com/privkey.pem;

        # SSL protocols and ciphers
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Handle Let's Encrypt ACME Challenge over HTTPS (optional)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect www to non-www
        if ($host = 'www.XXXXXX.com') {
            return 301 https://XXXXXX.com$request_uri;
        }

        # Proxy requests to the PHP-Apache production service
        location / {
            proxy_pass http://php_apache_prod;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS server block for preprod.XXXXXX.com
    server {
        listen 443 ssl;
        server_name preprod.XXXXXX.com;

        # SSL certificates (using the same certificate for simplicity)
        ssl_certificate /etc/letsencrypt/live/XXXXXX.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/XXXXXX.com/privkey.pem;

        # SSL protocols and ciphers
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Handle Let's Encrypt ACME Challenge over HTTPS (optional)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Enable HTTP Basic Authentication
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Proxy requests to the PHP-Apache pre-production service
        location / {
            proxy_pass http://php_apache_preprod;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Optional: Default server block to handle unmatched requests
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/XXXXXX.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/XXXXXX.com/privkey.pem;

    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Return a 444 (No Response) for unmatched requests
        return 444;
    }
}
